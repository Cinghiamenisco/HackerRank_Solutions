/*  */

    import java.util.*;
    public class test {
        public static void main(String[] args) {
            Scanner in = new Scanner(System.in);
            Deque deque = new ArrayDeque<>();
            
            int n = in.nextInt();
            int m = in.nextInt();
            int max = Integer.MIN_VALUE;
            int differents = 0;
            Object da_rimuovere;
            
            for(int i=0; i<n; i++) {
                
                int a = in.nextInt();
                
                //AGGIUNTA
                if (!deque.contains(a)) {
                    differents++;
                }
                deque.addLast(a);
                
                //RIMOZIONE
                if (deque.size() > m) {
                    da_rimuovere = deque.pop();
                    if (!deque.contains(da_rimuovere)) {
                        differents--;
                    }
                }
                
                if (differents > max)
                    max = differents;
                    
            }
                
            System.out.println(max);
        }
    }



/******** FUNZIONANTE MA TROPPO LENTO *******/
/*
    import java.util.*;
    public class test {
        public static void main(String[] args) {
            Scanner in = new Scanner(System.in);
            Deque pool = new ArrayDeque<>();
            Deque picked = new ArrayDeque<>();
            Set pickedset = new HashSet<>();
            
            int n = in.nextInt();
            int m = in.nextInt();

            for (int i = 0; i < n; i++) {
                pool.offerLast(in.nextInt());
            }
            
            int max = 0;
            int differents = 0;
            
            while ( ! pool.isEmpty()) {
                
                if (! picked.contains(pool.peekFirst()))
                    differents++;
                
                if (picked.size() < m) {
                    picked.offerLast(pool.pop());
                } else {
                    
                    Object last_popped = picked.pop();
                    if (! picked.contains(last_popped))
                        differents--;

                    picked.offerLast(pool.pop());
                }
                
                if (differents > max)
                    max = differents;
                
            }
            System.out.println(max);
        }
    }
*/
